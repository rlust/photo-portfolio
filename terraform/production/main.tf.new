# Configure the Google Cloud provider
provider "google" {
  project = var.project_id
  region  = var.region
  zone    = var.zone
}

# Enable required Google Cloud APIs
resource "google_project_service" "apis" {
  for_each = toset([
    "run.googleapis.com",
    "sqladmin.googleapis.com",
    "compute.googleapis.com",
    "vpcaccess.googleapis.com",
    "secretmanager.googleapis.com",
    "cloudbuild.googleapis.com",
    "containerregistry.googleapis.com",
    "servicenetworking.googleapis.com",
    "dns.googleapis.com",
    "monitoring.googleapis.com",
    "logging.googleapis.com",
    "cloudresourcemanager.googleapis.com",
    "iam.googleapis.com"
  ])

  service            = each.key
  disable_on_destroy = false
}

# Create a random ID for unique resource naming
resource "random_id" "suffix" {
  byte_length = 4
}

# VPC Module
module "vpc" {
  source = "../modules/vpc"
  
  project_id       = var.project_id
  environment      = var.environment
  region           = var.region
  vpc_name         = "${var.environment}-vpc-${random_id.suffix.hex}"
  subnet_cidr      = var.subnet_cidr
  allowed_ssh_ips  = var.allowed_ssh_ips
  
  depends_on = [google_project_service.apis]
}

# Cloud SQL Module
module "cloud_sql" {
  source = "../modules/cloud_sql"
  
  count = var.create_database ? 1 : 0
  
  project_id         = var.project_id
  environment        = var.environment
  region             = var.region
  database_name      = var.database_name
  user_name          = var.database_user
  user_password      = var.database_password
  tier               = var.database_tier
  availability_type  = var.database_availability_type
  disk_size          = var.database_disk_size
  vpc_network        = module.vpc.vpc_self_link
  
  depends_on = [
    google_project_service.apis,
    module.vpc
  ]
}

# Cloud Storage Module
module "cloud_storage" {
  source = "../modules/cloud_storage"
  
  count = var.create_storage_bucket ? 1 : 0
  
  project_id         = var.project_id
  environment        = var.environment
  bucket_name        = "${var.project_id}-${var.environment}-storage-${random_id.suffix.hex}"
  location           = var.region
  versioning_enabled = true
  force_destroy      = false  # Prevent accidental deletion in production
  
  cors = [
    {
      origin          = ["https://${var.domain_name}", "http://localhost:3000"]
      method          = ["GET", "HEAD", "PUT", "POST", "DELETE"]
      response_header = ["*"]
      max_age_seconds = 3600
    }
  ]
  
  lifecycle_rules = [
    {
      action = {
        type = "Delete"
      }
      condition = {
        age_days = 30
        with_state = "ARCHIVED"
      }
    },
    {
      action = {
        type = "SetStorageClass"
        storage_class = "NEARLINE"
      }
      condition = {
        age_days = 90
      }
    }
  ]
  
  depends_on = [google_project_service.apis]
}

# Service Account for the application
resource "google_service_account" "app" {
  account_id   = "${var.environment}-photo-portfolio-sa-${random_id.suffix.hex}"
  display_name = "Photo Portfolio Service Account (${var.environment})"
  description  = "Service account for Photo Portfolio application"
  
  depends_on = [google_project_service.apis["iam.googleapis.com"]]
}

# IAM roles for the service account
resource "google_project_iam_member" "cloud_sql_client" {
  project = var.project_id
  role    = "roles/cloudsql.client"
  member  = "serviceAccount:${google_service_account.app.email}"
  
  depends_on = [google_service_account.app]
}

resource "google_project_iam_member" "storage_admin" {
  project = var.project_id
  role    = "roles/storage.admin"
  member  = "serviceAccount:${google_service_account.app.email}"
  
  depends_on = [google_service_account.app]
}

resource "google_project_iam_member" "secret_accessor" {
  project = var.project_id
  role    = "roles/secretmanager.secretAccessor"
  member  = "serviceAccount:${google_service_account.app.email}"
  
  depends_on = [google_service_account.app]
}

# Create secrets in Secret Manager
resource "google_secret_manager_secret" "database_password" {
  secret_id = "${var.environment}-database-password"
  
  replication {
    automatic = true
  }
  
  depends_on = [google_project_service.apis["secretmanager.googleapis.com"]]
}

resource "google_secret_manager_secret_version" "database_password" {
  secret      = google_secret_manager_secret.database_password.id
  secret_data = var.database_password
  
  lifecycle {
    ignore_changes = [secret_data]
  }
}

resource "google_secret_manager_secret_iam_member" "database_password_access" {
  secret_id = google_secret_manager_secret.database_password.id
  role      = "roles/secretmanager.secretAccessor"
  member    = "serviceAccount:${google_service_account.app.email}"
  
  depends_on = [
    google_secret_manager_secret.database_password,
    google_service_account.app
  ]
}

# Cloud Run Module
module "cloud_run" {
  source = "../modules/cloud_run"
  
  project_id   = var.project_id
  environment  = var.environment
  region       = var.region
  service_name = "photo-portfolio-${var.environment}"
  
  # Container configuration
  image = "gcr.io/${var.project_id}/photo-portfolio:${var.image_tag}"
  port  = 8000
  
  # Environment variables
  environment_variables = {
    ENVIRONMENT          = var.environment
    DEBUG                = "False"
    SECRET_KEY           = var.secret_key
    JWT_SECRET_KEY       = var.jwt_secret_key
    DB_NAME             = var.database_name
    DB_USER             = var.database_user
    DB_HOST             = module.cloud_sql[0].private_ip
    DB_PORT             = "5432"
    STORAGE_BUCKET_NAME = module.cloud_storage[0].bucket_name
    ALLOWED_HOSTS       = "*"
    CSRF_TRUSTED_ORIGINS = "https://${var.domain_name}"
  }
  
  # Secret environment variables
  secret_environment_variables = {
    DB_PASSWORD = {
      secret_ref = google_secret_manager_secret.database_password.secret_id
      version    = "latest"
    }
  }
  
  # Resource limits
  cpu    = var.cpu
  memory = var.memory
  
  # Restrict access in production
  allow_public_access = false
  domain_name = var.domain_name
  
  # VPC connector for private IP access to Cloud SQL
  vpc_connector = module.vpc.vpc_connector_name
  
  # Service account
  service_account_email = google_service_account.app.email
  
  # Autoscaling
  min_instances = var.min_instances
  max_instances = var.max_instances
  
  depends_on = [
    module.cloud_sql,
    module.cloud_storage,
    google_secret_manager_secret_version.database_password,
    google_secret_manager_secret_iam_member.database_password_access
  ]
}

# Outputs
output "cloud_run_url" {
  description = "The URL of the deployed Cloud Run service"
  value       = module.cloud_run.service_url
}

output "cloud_sql_connection_name" {
  description = "The connection name of the Cloud SQL instance"
  value       = module.cloud_sql[0].connection_name
}

output "cloud_sql_private_ip" {
  description = "The private IP address of the Cloud SQL instance"
  value       = module.cloud_sql[0].private_ip
}

output "cloud_storage_bucket" {
  description = "The name of the Cloud Storage bucket"
  value       = module.cloud_storage[0].bucket_name
}

output "service_account_email" {
  description = "The email of the service account used by the application"
  value       = google_service_account.app.email
}
