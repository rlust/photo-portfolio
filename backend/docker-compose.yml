version: '3.8'

# Custom network for all services
networks:
  photo-portfolio-network:
    driver: bridge

# Volumes for persistent data
volumes:
  postgres_data:
  redis_data:

services:
  # ===================================
  # FastAPI Application
  # ===================================
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev  # Using development Dockerfile for local development
    container_name: photo-portfolio-backend
    restart: unless-stopped
    ports:
      - "8000:8000"  # FastAPI default port
    environment:
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=True
      
      # Database settings
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-photo_portfolio}
      - DB_HOST=db
      - DB_PORT=5432
      
      # JWT settings
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440  # 24 hours
      
      # CORS settings (comma-separated list of allowed origins)
      - BACKEND_CORS_ORIGINS=http://localhost:3000,http://localhost:8000
      
      # Google Cloud Storage (optional for local development)
      - GCS_BUCKET=${GCS_BUCKET:-}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-}
      
      # Redis settings (for caching)
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      - db
      - redis
    networks:
      - photo-portfolio-network
    command: >
      sh -c "python -m uvicorn app.main:app 
             --host 0.0.0.0 
             --port 8000 
             --reload 
             --reload-dir /app"

  # ===================================
  # PostgreSQL Database
  # ===================================
  db:
    image: postgres:15-alpine
    container_name: photo-portfolio-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-photo_portfolio}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-photo_portfolio}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - photo-portfolio-network

  # ===================================
  # Redis (for caching)
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: photo-portfolio-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - photo-portfolio-network

  # ===================================
  # PGAdmin (Database Admin UI)
  # ===================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: photo-portfolio-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - photo-portfolio-network

  # ===================================
  # Adminer (Alternative Database Admin UI)
  # ===================================
  adminer:
    image: adminer:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
    depends_on:
      - db
    networks:
      - photo-portfolio-network
